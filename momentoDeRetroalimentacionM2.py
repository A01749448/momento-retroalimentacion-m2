# -*- coding: utf-8 -*-
"""momentoDeRetroalimentacionM2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TpSf6EMTVa90Y322RN-GU6jAXHykNJ8h

#  Implementación de una técnica de ML (Sin Framework)
"""

'''
Momento de Retroalimentación: Módulo 2 Implementación de una técnica de 
aprendizaje máquina sin el uso de un framework. (Portafolio Implementación)

Jorge Chávez Badillo A01749448

18-09-2022
'''

# Importación de Librerías 
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns 
from sklearn.model_selection import train_test_split
import numpy as np
from sklearn import metrics

"""## Lectura de Datos"""

# Dataset 
df = pd.read_csv('/content/Fish.csv', sep = ',')
df = df.head(300)
df

"""## Entendimiento de Datos

### Verificación de los Tipos de Datos
"""

'''
Observar los tipos de datos del dataset
'''

df.info()

"""### Análisis Estadístico"""

'''
Se obtienen estadísticos generales sobre el dataset para poder 
observar el comportamiento
'''

df.describe()

sns.relplot(data = df, x = 'Length2', y = 'Width', hue = 'Species').set(title = 'Length2 vs Width')

sns.relplot(data = df, x = 'Height', y = 'Weight', hue = 'Species').set(title = 'Height vs Weight')

sns.pairplot(df, hue = "Species", palette = "husl", corner = True)

sns.countplot(df['Species'], label="Count", palette = 'Set2').set(title = 'Especies de Peces')
plt.show()

"""### Búsqueda de Correlaciones"""

# Matriz de Correlación
correlationMatrix = df.corr()
correlationMatrix.style.background_gradient(cmap='GnBu')

"""## Limpieza y Preparación de los Datos

### Separación del Dataset en Training y Test
"""

'''
Ya que no existen valores nulos, solo es necesario preparar los datos para 
ser procesados por el modelo, separar en valores de entrenamiento y pruebas
'''

x = df.copy()['Length2']
y = df['Width']

# Training y Testing
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.35, random_state = 0)

"""## Modelo Elegido

### Regresión Lineal
"""

def linear_regression(x, y, n_iterations, alpha):
  '''
  Función que implementa la técnica de machine 
  learning de regresión líneal
  '''
  # Función de hipótesis 
  h = lambda x, theta: theta[0] + theta[1] * x
  # Valores iniciales 
  theta = [1, 1]
  #alpha = 0.0001
  n = len(x)

  while n_iterations != 0:
    all_h0 = [] # Todos los valores de h
    delta = []
    deltaX = []

    for x_i, y_i in zip(x, y):
      all_h0.append(h(x_i, theta)) # Valor de h
      delta.append(h(x_i, theta) - y_i) # h0 - y
      deltaX.append((h(x_i, theta) - y_i) * x_i) # h0 - y * x 

    theta[0] = theta[0] - alpha / n * sum(delta)
    theta[1] = theta[1] - alpha / n * sum(deltaX)
    n_iterations -= 1

  print('=' * 100)
  print('Valores de h0: ')
  print(all_h0)
  print('Valores de h0 - y: ')
  print(delta)
  print('Valores de h0 - y * x: ')
  print(deltaX)
  print('Valores de theta: ')
  print(theta)
  print('=' * 100)

  plt.figure(figsize=(10, 8))
  plt.scatter(x, y, marker='.')
  plt.plot(x, all_h0, color = 'green')
  plt.title('Linear Regression for the Wine Dataset')
  plt.xlabel('Alcohol')
  plt.ylabel('Quality')
  plt.show()
  return all_h0

def metricas(real, prediccion):
  correlation_matrix = np.corrcoef(real, prediccion)
  correlation = correlation_matrix[0,1]
  r_squared = correlation**2
  print('=' * 100)
  print('Métricas de Desempeño: ')
  print('Coeficiente de Determinación: ', r_squared)
  print('Accuracy Score: ', metrics.r2_score(real, prediccion))
  print('Mean Squared Error : ', metrics.mean_squared_error(real, prediccion))
  print('Mean Absolute Error: ', metrics.mean_absolute_error(real, prediccion))

"""### Pruebas con Diferentes Parámetros"""

# Prueba 1
prediccion1 = linear_regression(x_train, y_train, 100000, 0.0001)
metricas(y_train, prediccion1)

# Prueba 2
prediccion2 = linear_regression(x_train, y_train, 10000, 0.00001)
metricas(y_train, prediccion2)

# Prueba 3
prediccion3 = linear_regression(x_train, y_train, 100000, 0.001)
metricas(y_train, prediccion3)

"""### Predicciones"""

'''
Predicción usando el mejor modelo:
De acuerdo con las métricas de las pruebas anteriores, 
observamos que la predicción 3 tiene un mayor score,
por ello se decide utilizar esa cionfiguración para la 
predicción usando test. 
'''

prediccion_final = linear_regression(x_test, y_test, 100000, 0.001)
metricas(y_test, prediccion_final)

df_x_test = pd.DataFrame(x_test)
df_x_test['Real Width'] = y_test
df_x_test = df_x_test.reset_index().drop(columns = 'index')
df_x_test['Prediction'] = prediccion_final
df_x_test

print('Valores de Entrada: ')
print(df_x_test['Length2'].head(10))
print('Valores Reales: ')
print(df_x_test['Real Width'].head(10))
print('Predicción: ')
print(df_x_test['Prediction'].head(10))

